datasource db {
    provider          = "sqlserver"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id          String   @id @default(uuid())
    pubkey      String
    identifier  String?
    isActivated Boolean
    createdAt   DateTime
    nipped      Int      @default(0)

    userVerifications UserVerification[]
    userRelays        UserRelay[]
    userEvents        UserEvent[]
    authLogins        AuthLogin[]
    authRegistration  AuthRegistration?
}

model UserVerification {
    id        String   @id @default(uuid())
    userId    String
    createdAt DateTime
    expiresAt DateTime
    code      String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserRelay {
    id      String @id @default(uuid())
    userId  String
    address String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserEvent {
    id              String   @id @default(uuid())
    userId          String
    userEventTypeId Int
    createdAt       DateTime @default(now())

    user         User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userEentType UserEventType @relation(fields: [userEventTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model UserEventType {
    id         Int         @id
    name       String
    userEvents UserEvent[]
}

model BlockedIdentifier {
    id   Int    @id @default(autoincrement())
    name String @unique
}

model AuthRegistration {
    id         String   @id @default(uuid())
    userId     String   @unique
    identifier String
    createdAt  DateTime
    validUntil DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    authRegistrationCode AuthRegistrationCode?
}

model AuthRegistrationCode {
    id                 String @id @default(uuid())
    authRegistrationId String @unique
    code               String

    authRegistration AuthRegistration @relation(fields: [authRegistrationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model FraudAuthRegistration {
    id         String   @id @default(uuid())
    userId     String   @unique
    reportedAt DateTime
}

model AuthLogin {
    id         String   @id @default(uuid())
    userId     String
    code       String
    createdAt  DateTime
    validUntil DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
